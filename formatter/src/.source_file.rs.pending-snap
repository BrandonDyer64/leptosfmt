{"run_id":"1687984528-311660000","line":131,"new":{"module_name":"leptosfmt_formatter__source_file__tests","snapshot_name":"with_comments","metadata":{"source":"formatter/src/source_file.rs","assertion_line":131,"expression":"result"},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                each=move || { errors.clone().into_iter().enumerate() }\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}\n"},"old":{"module_name":"leptosfmt_formatter__source_file__tests","metadata":{},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                // a function that returns the items we're iterating over; a signal is fine\n                each=move || { errors.clone().into_iter().enumerate() }\n                // a unique key for each item as a reference\n                // yeah\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}"}}
{"run_id":"1687984733-757987000","line":131,"new":{"module_name":"leptosfmt_formatter__source_file__tests","snapshot_name":"with_comments","metadata":{"source":"formatter/src/source_file.rs","assertion_line":131,"expression":"result"},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                each=move || { errors.clone().into_iter().enumerate() }\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}\n"},"old":{"module_name":"leptosfmt_formatter__source_file__tests","metadata":{},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                // a function that returns the items we're iterating over; a signal is fine\n                each=move || { errors.clone().into_iter().enumerate() }\n                // a unique key for each item as a reference\n                // yeah\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}"}}
{"run_id":"1687984822-55459000","line":131,"new":{"module_name":"leptosfmt_formatter__source_file__tests","snapshot_name":"with_comments","metadata":{"source":"formatter/src/source_file.rs","assertion_line":131,"expression":"result"},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                each=move || { errors.clone().into_iter().enumerate() }\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}\n"},"old":{"module_name":"leptosfmt_formatter__source_file__tests","metadata":{},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                // a function that returns the items we're iterating over; a signal is fine\n                each=move || { errors.clone().into_iter().enumerate() }\n                // a unique key for each item as a reference\n                // yeah\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}"}}
{"run_id":"1687984890-924479000","line":131,"new":{"module_name":"leptosfmt_formatter__source_file__tests","snapshot_name":"with_comments","metadata":{"source":"formatter/src/source_file.rs","assertion_line":131,"expression":"result"},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                each=move || { errors.clone().into_iter().enumerate() }\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}\n"},"old":{"module_name":"leptosfmt_formatter__source_file__tests","metadata":{},"snapshot":"fn main() {\n    view! { cx,\n        <div>\n            // This is one beautiful message\n            // at the end of the line\n            <span>\"hello\"</span>\n            // at the end of the line\n            <div>\n                // double\n                // comments\n                <span>\"hello\"</span>\n            </div>\n            <For\n                // a function that returns the items we're iterating over; a signal is fine\n                each=move || { errors.clone().into_iter().enumerate() }\n                // a unique key for each item as a reference\n                // yeah\n                key=|(index, _error)| *index\n            />\n        </div>\n    }; \n}"}}
{"run_id":"1687984995-87484000","line":131,"new":null,"old":null}
{"run_id":"1687985032-164778000","line":224,"new":null,"old":null}
{"run_id":"1687985032-164778000","line":97,"new":null,"old":null}
{"run_id":"1687985032-164778000","line":173,"new":null,"old":null}
{"run_id":"1687985032-164778000","line":199,"new":null,"old":null}
{"run_id":"1687985032-164778000","line":264,"new":null,"old":null}
{"run_id":"1687985032-164778000","line":131,"new":null,"old":null}
{"run_id":"1687985035-440262000","line":97,"new":null,"old":null}
{"run_id":"1687985035-440262000","line":224,"new":null,"old":null}
{"run_id":"1687985035-440262000","line":199,"new":null,"old":null}
{"run_id":"1687985035-440262000","line":173,"new":null,"old":null}
{"run_id":"1687985035-440262000","line":131,"new":null,"old":null}
{"run_id":"1687985035-440262000","line":264,"new":null,"old":null}
